{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactView.module.css","redux/contact/contact-operations.js","redux/contact/contact-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView/ContactsView.jsx"],"names":["module","exports","axios","defaults","baseURL","getAllContacts","state","contacts","items","getFilter","filter","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","errorMessage","setErrorMessage","validateForm","isExistContact","find","setTimeout","resetForm","Slide","direction","in","timeout","className","styles","alert","Alert","severity","form","onSubmit","e","preventDefault","contact","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","message","addContact","label","input","type","placeholder","value","onChange","target","button","ContactList","TransitionGroup","component","list","map","id","CSSTransition","classNames","unmountOnExit","onClick","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","Filter","changeFilter","ContactView","isLoading","useEffect","a","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","massage","Loader","container","mountOnEnter","tittle"],"mappings":"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","file":"static/js/3.5fdbf459.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2z8Rc\",\"label\":\"ContactForm_label__aAwnT\",\"input\":\"ContactForm_input__2a5Ir\",\"button\":\"ContactForm_button__3PJA2\",\"alert\":\"ContactForm_alert__H05qC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactList_enter__26I6e\",\"enterActive\":\"ContactList_enterActive__2WKjh\",\"exit\":\"ContactList_exit__3VuWY\",\"exitActive\":\"ContactList_exitActive__1Bk9m\",\"button\":\"ContactList_button__i1sUt\",\"list\":\"ContactList_list__1yo-_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__n0GiG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactView_container__2DmP6\",\"tittle\":\"ContactView_tittle__1i-WL\",\"appear\":\"ContactView_appear__13oPy\",\"appearActive\":\"ContactView_appearActive__3WugH\",\"filter\":\"ContactView_filter__20xm-\"};","import axios from 'axios';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchContactsSuccess,\r\n  addContactRequest,\r\n  deleteContactRequest,\r\n  fetchContactsRequest,\r\n  addContactError,\r\n  deleteContactError,\r\n  toggleCompletedRequest,\r\n  toggleCompletedSuccess,\r\n  toggleCompletedError,\r\n  fetchContactsError,\r\n} from './contact-actions';\r\n//axios.defaults.baseURL = 'http://localhost:3000';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error.massage)));\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\nexport const toggleCompleted = ({ id, completed }) => dispatch => {\r\n  const update = { completed };\r\n\r\n  dispatch(toggleCompletedRequest());\r\n\r\n  axios\r\n    .patch(`/contacts/${id}`, update)\r\n    .then(({ data }) => dispatch(toggleCompletedSuccess(data)))\r\n    .catch(error => dispatch(toggleCompletedError(error.message)));\r\n};\r\n\r\n// const operations = { fetchContacts, addContact, deleteContact };\r\n\r\n// export default operations;\r\n\r\n// export default { fetchContacts, addContact, deleteContact };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getAllContacts = (state) => state.contacts.items;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n   // console.log('contacts', contacts);\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst selectors = {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts,\r\n    getAllContacts,\r\n};\r\nexport default selectors;\r\n\r\n// export const getVisibleContacts = state => {\r\n\r\n// const contacts = getAllContacts(state);\r\n// const filter = getFilter(state);\r\n// const normalizedFilter = filter.toLowerCase();\r\n// return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n//  };\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addContact } from '../../redux/contact/contact-operations';\r\nimport selectors from '../../redux/contact/contact-selectors';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\n// const mapStateToProps = (state) => ({\r\n//         contacts: selectors.getAllContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onAdd: (name, number) =>\r\n//         dispatch(addContact(name, number)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nexport default function ContactForm() {\r\n//     static propTypes = {\r\n//     onAdd: PropTypes.func.isRequired,\r\n//   };\r\n//     state = {\r\n//         name: \"\",\r\n//         number: \"\",\r\n//         error: null,\r\n//     };\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(selectors.getAllContacts);\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  //const [error, setError] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    // handleChangeForm = ({target}) => {\r\n    //     const { name, value } = target\r\n    //     this.setState({ [name]: value })\r\n    // };\r\n\r\n  const handleChangeName = e => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleChangeNumber = e => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        //const { name, number } = this.state;\r\n        //const { onAdd } = this.props;\r\n        const isValidateForm = validateForm()\r\n\r\n        if (!isValidateForm)\r\n            dispatch(addContact(name, number));\r\n            resetForm()    \r\n    };\r\n\r\n  const validateForm = () => {\r\n        // const { name, number } = this.state;\r\n        \r\n        // const { contacts } = this.props;  \r\n        const isExistContact = !!contacts.find((items) => items.name.toLowerCase() === name.toLowerCase());\r\n        \r\n        if (!name || !number) {\r\n            setErrorMessage('Some filed is empty');\r\n            return setTimeout(() => {\r\n                setErrorMessage(null);\r\n            }, 2000);\r\n            \r\n        }\r\n        if (isExistContact) {\r\n            setErrorMessage('Contact is already exist');\r\n            return setTimeout(() => {\r\n        setErrorMessage(null);\r\n      }, 2000);\r\n        }\r\n        \r\n    } \r\n\r\n  const resetForm = () => {\r\n      setName('');\r\n      setNumber('');\r\n    };\r\n\r\n        //const { name, number, error } = this.state;       \r\n        return (\r\n            <>\r\n                <Slide direction=\"left\" in={errorMessage !== null} timeout={250} >\r\n                    <div className={styles.alert}>\r\n                        <Alert severity=\"warning\">{errorMessage}</Alert>\r\n                        </div>\r\n                    </Slide>\r\n            <form className={styles.form} onSubmit={handleFormSubmit}>\r\n                <label className={styles.label}>name</label>\r\n                <input className={styles.input} type=\"text\" name=\"name\" placeholder=\"Enter name\" value={name} onChange={handleChangeName} />   \r\n                <label className={styles.label}>number</label>\r\n                <input className={styles.input} type=\"tel\" name=\"number\" placeholder=\"Enter number number\" value={number} onChange={handleChangeNumber} />    \r\n                <button className={styles.button} type='submit'>Add Contact</button>   \r\n            </form>\r\n           </>\r\n        )\r\n    }\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport styles from './ContactList.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contact/contact-operations';\r\nimport selectors from '../../redux/contact/contact-selectors';\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: selectors.getVisibleContacts(state),\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onRemove: id => dispatch(deleteContact(id)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(selectors.getVisibleContacts);\r\n\r\n    return (\r\n      <>\r\n        <TransitionGroup component=\"ul\" className={styles.list}>\r\n          {contacts.map(({ name, number, id }) => {\r\n            return (\r\n              <CSSTransition\r\n                key={id}\r\n                classNames={styles}\r\n                timeout={300}\r\n                unmountOnExit\r\n              >\r\n                <li key={id}>\r\n                  {name}: {number} <button className={styles.button} id={id} onClick={() => dispatch(deleteContact(id))}>x</button>\r\n                </li>\r\n              </CSSTransition>\r\n            );\r\n          })}\r\n        </TransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n      id: PropTypes.string,\r\n    }),\r\n  ),\r\n};\r\n\r\n","import React from 'react';\r\nimport styles from './Filter.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeFilter } from '../../redux/contact/contact-actions';\r\nimport selectors from '../../redux/contact/contact-selectors';\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: selectors.getFilter(state),\r\n//   contacts: selectors.getAllContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: e => dispatch(changeFilter(e.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(selectors.getFilter);\r\n  const onChange = e => dispatch(changeFilter(e.target.value));\r\n  \r\n  return (\r\n    <input\r\n      className={styles.input}\r\n      type='text'\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder='Enter name for Search'\r\n    />\r\n  )\r\n};\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ContactForm from '../../components/ContactForm/ContactForm';\r\nimport ContactList from '../../components/ContactList/ContactList';\r\nimport Filter from '../../components/Filter/Filter';\r\nimport styles from './ContactView.module.css';\r\nimport Loader from '../../components/Loader/Loader';\r\nimport selectors from '../../redux/contact/contact-selectors';\r\nimport { fetchContacts } from '../../redux/contact/contact-operations';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLoading: selectors.getLoading(state),\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   fetchContacts: fetchContacts,\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactView);\r\n\r\nexport default function ContactView() {\r\n  const dispatch = useDispatch();\r\n    const isLoading = useSelector(selectors.getLoading);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n      <>\r\n        \r\n      {isLoading && <Loader />}\r\n      <div className={styles.container}>\r\n          <Slide direction=\"right\" in={true} timeout={300} mountOnEnter unmountOnExit>\r\n            <h1 className={styles.tittle}>Phonebook</h1>\r\n            </Slide>\r\n\r\n        <ContactForm />\r\n        <div className={styles.filter}>\r\n          <h2>find contact</h2>\r\n          <Filter />\r\n        </div>\r\n        <ContactList />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}